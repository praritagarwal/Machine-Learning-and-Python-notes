import numpy as np
import matplotlib.pyplot as plt
import copy

Arr = input('Input an unsorted list of numbers') # check if the syntax for this is correct!
                                                 # input only accepts text input. So we will have to write a function to convert this into a list

Arr = np.array(Arr)

# check that arr is indeed a 1d list and not a list of lists ....
# check that arr contains only numbers and not strings ....

print('The unsorted list was: {}'.format(Arr))

mergesort(Arr) # sorting arr inplace

print('The sorted list is: {}'.format(Arr))

def mergesort(arr):
    len = arr.shape[-1]
    if len <= 1: return 
    middle = len//2    
    mergesort(arr[:middle]) # sort the left-half
    mergesort(arr[middle:]) # sort the right-half
    merge(arr) # merge the left-half and the right-half
    return


def merge(arr):
    len = arr.shape[-1]
    middle = len//2
    left_pos = 0 # choose an element from left half of helper 
    right_pos = len//2  # choose an element from right half of helper 
    current_pos = 0 # current pos in the arr
    helper = copy.deepcopy(arr) # deep copy of arr. check if this is correct!
                                # copy.copy() does a shallow copy. Use copy.deepcopy() for deep copy
                                 
    
    while (left_pos < middle) and (right_pos < len):
         if helper[left_pos] < helper[right_pos]: 
            arr[current_pos] = helper[left_pos]
            left_pos+=1
         else:
            arr[current_pos] = helper[right_pos]
            right_pos+=1
         current_pos+=1
    
    # copy the remain elements of the left-array
    for iter in range(left_pos, middle):
         arr[current_pos] = helper[iter]
         current_pos+=1    
    return
         
       *******************************************Dry Run************************************************
   1) Arr = [1,5,8,3,2,9,6,4]

   2) mergesort(arr = Arr) => mergesort([1,5,8,3,2,9,6,4])
   
   [ 3) len = 8
     4) len > 1 
     5) middle = 8//2 = 4
     6) mergesort(arr[:4]) => mergesort([1,5,8,3])
     [ 7) len = 4
       8) len > 1
       9) middle = 4//2 = 2
       10) mergesort([1,5,8,3][:2]) => mergesort([1,5])
       [ 11) len = 2
         12) len > 1
         13) middle = 2//2 = 1
         14) mergesort([1,5][:1]) => mergesort([1])
         [ 15) len = 1
           16)  len == 1 => return ]
         17) mergesort([1,5][1:]) => mergesort([5])
         [ 18) len = 1
           19) len == 1 => return ]
         20) merge([1,5])
         [ 21) len = 2
           22) middle = 2//2 = 1
           23) left_pos = 0
           24) right_pos = 2//2 = 1
           25) helper = [1, 5]
           26) while 0 < 1 && 1 < 2:
           [ 27)  helper[0] < helper[1]? => 1 < 5? = True
             [28) arr[0] = helper[0] => arr[0] = 1; Arr = [1, 5, 8, 3, 2, 9, 6, 4]
              29) left_pos+=1 => left_pos = 1 ]
             30) while 1 < 1 && 1 < 2 =  False => while loop ends ]
             31) for iter in range(1,1) => no loop
           32) end of call @ 20) i.e. merge([1,5]) ]
         33) end of call @ 10) i.e. mergesort(1,5) ]
       34) mergesort([1,5,8,3][2:]) => mergesort([8,3])
       [ 35) len = 2
         36) len > 1
         37) middle = 2//2 = 1
         38) mergesort([8,3][:1]) => mergesort([8])
         [ 39) len = 1
           40) len == 1 => return ]
         41) mergesort([8,3][1:]) => mergesort([3])
         [ 42) len = 1
           43) len == 1 => return ]
         44) merge([8,3])
         [ 45) len = 2
           46) middle = 2//2 = 1
           47) left_pos = 0
           48) right_pos = 2//2 = 1
           49) current_pos = 0 
           50) helper = [8, 3]
           51) while 0 < 1 && 1 < 2
           [ 52) helper[0] < helper[1]? => 8 < 3? = False 
             [ 53) arr[0] = helper[1] => arr[0] = 3 => arr = [3, 3]; Arr = [1, 5, 3, 3, 2, 9, 6, 4]
               54) right_pos + = 1 => right_pos = 2 ] 
             55) current_pos+=1 => current_pos = 1
             56) while 0 < 1 && 2 < 2 = False => while loop ends ]
           57) for iter in range(0,1): # range(0,1) = [0]
           [ 58) iter = 0 :
             59) arr[1] = helper[0] => arr[1] = 8 => arr = [3, 8]; Arr = [1, 5, 3, 8, 2, 9, 6, 4]
             60) end of for loop ]
           61) end of call @ 44) i.e. merge([8,3]) ]
         62) end of call @ 34) i.e. mergesort([8,3])
       63) merge([1,5,3,8])
       64) len = 4
       65) middle = 4//2 = 2
       66) left_pos = 0
       67) right_pos = 4//2 = 2
       68) current_pos = 0
       69) helper = [1,5,3,8]
       70) while 0 < 2 && 2 < 4
       [ 71) helper[0] < helper[2]? => 1 < 3? = True
         72) arr[0] = helper[0] => arr[0] = 1; arr = [1,5,3,8]; Arr = [1,5,3,8,2,9,6,4]
         73) left_pos + = 1 => left_pos = 1
         74) current_pos +=1 => current_pos = 1
         75) while 1 < 2 && 2 < 4
         76) helper[1] < helper[2]? => 5 < 3? = False
         77) arr[1] = helper[2] => arr[1] = 3; arr = [1,3,3,8]; Arr =[1,3,3,8,2,9,6,4]
         78) right_pos + = 1 => right_pos = 3
         79) current_pos + = 1 => current_pos = 2
         80) while 1 < 2 && 3 < 4
         81) helper[1] < helper[3]? => 5 < 8? = True
         82) arr[2] = helper[1] => arr[2] = 5; arr = [1,3,5,8]; Arr =[1,3,5,8,2,9,6,4]
         83) left_pos += 1 => left_pos = 2
         84) current_pos +=1 => current_pos = 3
         85) while 2 < 2 && 3 < 4 = False => while loop ends]
       86) for iter in range(2,2) => no loop # range(2,2) = []    
       89) end of call @ 63) i.e merge([1,5,3,8]) ]
      90) end of call @ 6) i.e. mergesort([1,5,8,3]) ]
     91) mergesort(arr[4:]) => mergesort([2,9,6,4])
     [ 92) len = 4
       93) len < = 1 = False
       94) middle = 4//2 = 2
       95) mergesort([2,9,6,4][:2]) => mergesort([2,9])
       [ 96) len = 2
         97) len < = 1 = False
         98) middle = 2//2 = 1
         99) mergesort[[2,9][:1]] => mergesort([2])
         [ 100) len = 1
           101) len < = 1 = True => return; end of call @ 99) i.e. mergesort([2])  ]
         102) mergesort([2,9][1:]) => mergesort([9])
         [ 103) len = 1  
           104) len < = 1 = True => return; end of call @ 102) i.e. mergesort([9]) ] 
         105) merge([2,9]) 
         [ 106) len = 2
           107) middle = 2//2 = 1
           108) left_pos = 0
           109) right_pos = 2//2 = 1
           110) current_pos = 0
           111) helper = [2,9]
           112) while 0 < 1 && 1 < 2 = True
           [ 113) helper[0] < helper[1]? = 2 < 9? = True
             [ 114) arr[0] = helper[0] => arr[0] = 2; arr = [2, 9]; Arr = [1,3,5,8,2,9,6,4]
               115) left_pos+=1 => left_pos = 1 ]
             116) current_pos+=1 => current_pos = 1
             117) while 1 < 1 && 1 < 2 = False => end of while loop ]
           118) for iter in range(1,1) => no for loop # range(1,1) = []
           119) end of call @ 105) i.e merge([2,9]) ]
         120) end of call @ 95) i.e. mergesort([2,9]) ]
       121) mergesort([2,9,6,4][2:]) => mergesort([6,4])
       [ 122) len = 2
         123) len < = 1? = False
         124) middle = 2//2 = 1
         125) mergesort([6,4][:1]) => mergesort([6])
         [ 126) len = 1
           127) len < = 1? = True => return; end of call @125) i.e mergesort([6]) ] 
         128) mergesort([6,4][1:]) => mergesort([4])
         [ 129) len = 1
           130) len <= 1? = True => return; end of call @128) i.e. mergesort([4]) ]
         131) merge([6,4])
         [ 132) len = 2
           133) middle = 2//2 = 1
           134) left_pos = 0
           135) right_pos = 2//2 = 1
           136) current_pos = 0
           137) helper = [6,4] 
           138) while 0 < 1 && 1 < 2 = True      
           [ 139) helper[0] < helper[1]? = 6 < 4? = False
             [ 140) arr[0] = helper[1] => arr[0] = 4; arr = [4,4]; Arr = [1,3,5,8,2,9,4,4]
               141) right_pos+=1 => right_pos = 2 ]
             142) current_pos+=1 => current_pos = 1
             143) while 0 < 1 && 2 < 2 = False => end of while loop ]
           144) for iter in range(0,1) # range(0,1) = [0]
           [ 145) iter = 0
             146) arr[1] = helper[0] => arr[1] = 6; arr = [4,6]; Arr = [1,3,5,8,2,9,4,6]
             147) current_pos+=1 => current_pos = 2
             148) end of for loop ]
           149) end of call @131) i.e. merge([6,4])   ]
         150) end of call @121) i.e. mergesort([6,4]) ]
       151) merge(2,9,4,6)
       [ 152) len = 4
         153) middle = 4//2 = 2
         154) left_pos = 0
         155) right_pos = 4//2 = 2
         156) current_pos = 0
         157) helper = [2,9,4,6]
         158) while 0 < 2 && 2 < 4? = True
         [ 159) helper[0] < helper[2]? = 2 < 4? = True
           [ 160) arr[0] = helper[0] => arr[0] = 2; arr = [2,9,4,6]; Arr = [1,3,5,8,2,9,4,6]
             161) left_pos+=1 => left_pos = 1 ]
           162) current_pos+=1 => current_pos = 1
           163) while 1 < 2 && 2 < 4? = True
           164) helper[1] < helper[2]? = 9 < 4? = False
           [ 165) arr[1] = helper[2] => arr[1] = 4; arr = [2,4,4,6]; Arr = [1,3,5,8,2,4,4,6]
             166) right_pos+=1 => right_pos = 3 ]
           167) current_pos+=1 => current_pos = 2
           168) while 1 < 2 && 3 < 4? = True
           169) helper[1] < helper[3]? = 9 < 6? = False
           [ 170) arr[2] = helper[3] => arr[2] = 6; arr = [2,4,6,6]; Arr = [1,3,5,8,2,4,6,6]
             171) right_pos+=1 => right_pos = 4 ]
           172) current_pos+=1 => current_pos = 3
           173) while 1 < 2 && 4 < 4? = False => end of while loop ]
         174) for iter in range(1,2) # range(1,2) = [1]
         [ 175) iter = 1
           176) arr[3] = helper[1] => arr[3] = 9; arr = [2,4,6,9]; Arr = [1,3,5,8,2,4,6,9]
           177) end of for loop ]
         178) end of call @ 151) i.e. merge(2,9,4,6) ]  
       179) end of call @ 91) i.e. mergesort([2,9,6,4])
     180) merge([1,3,5,8,2,4,6,9])
     [ 181) len = 8
       182) middle = 8//2 = 4
       183) left_pos = 0
       184) right_pos = 8//2 = 4
       185) current_pos = 0
       186) helper = [1,3,5,8,2,4,6,9]
       187) while 0 < 4 && 4 < 8? = True
       [ 188) helper[0] < helper[4]? = 1 < 2? = True
         [ 189) arr[0] = helper[0] => arr[0] =1; arr = [1,3,5,8,2,4,6,9]; Arr = [1,3,5,8,2,4,6,9]
           190) left_pos+=1; left_pos = 1 ]
         191) current_pos +=1 => current_pos = 1
         192) while 1 < 4 && 4 < 8? = True
         193) helper[1]< helper[4]? = 3 < 2? = False
         [ 194) arr[1] = helper[4] => arr[1] = 2; arr = [1,2,5,8,2,4,6,9]; Arr = [1,2,5,8,2,4,6,9]
           195) right_pos+=1 => right_pos = 5 ]
         196) current_pos+=1 => current_pos = 2
         197) while 1 < 4 && 5 < 8? = True
         198) helper[1] < helper[5]? = 3 < 4? = True
         [ 199) arr[2] = helper[1] => arr[2] = 3; arr = [1,2,3,8,2,4,6,9]; Arr = [1,2,3,8,2,4,6,9]
           200) left_pos+=1 => left_pos = 2 ]
         201) current_pos +=1 => current_pos = 3
         202) while 2 < 4 && 5 < 8? = True
         203) helper[2] < helper[5]? = 5 < 4? = False
         [ 204) arr[3] = helper[5] => arr[3] = 4; arr = [1,2,3,4,2,4,6,9]; Arr = [1,2,3,4,2,4,6,9]
           205) right_pos+=1 => right_pos = 6 ]
         206) current_pos+=1 => current_pos = 4
         207) while 2 < 4 && 6 < 8? = True
         208) helper[2] < helper[6]? = 5 < 6? = True
         [ 209) arr[4] = helper[2] => arr[4] = 5; arr = [1,2,3,4,5,4,6,9]; Arr = [1,2,3,4,5,4,6,9]
           210) left_pos+=1 => left_pos = 3 ]
         211) current_pos+=1 => current_pos = 5
         212) while 3 < 4 && 6 < 8? = True
         213) helper[3] < helper[6]? = 8 < 6 = False
         [ 214) arr[5] = helper[6] => arr[5] = 6; arr = [1,2,3,4,5,6,6,9]; Arr = [1,2,3,4,5,6,6,9]
           215) right_pos+=1 => right_pos = 7 ]
         216) current_pos+=1 => current_pos = 6
         217) while 3<4 && 7<8? = True
         218) helper[3] < helper[7]? = 8<9? = True
         [ 219) arr[6] = helper[3] => arr[6] = 8; arr = [1,2,3,4,5,6,8,9]; Arr = [1,2,3,4,5,6,8,9]
           220) left_pos+=1 => left_pos = 4 ]
         221) current_pos+=1 => current_pos = 7
         222) while 4<4 && 7<8? = False => end of while loop ]
       223) for iter in range(4,4) => no for loop # range(4,4) = []
       224) end of call @ 180) i.e. merge([1,3,5,8,2,4,6,9])
     225) end of call @ 2) i.e mergesort([1,5,8,3,2,9,6,4])
    
Finished: Final result: Arr = [1,2,3,4,5,6,8,9]

Note that in the above dry run we say that our implementation correctly sorts arrays of length 1, 2, 4 & 8; Let us also check that it works for odd length arrays i.e. arrays of length 3 

1) Arr = [2,9,6]         
2) mergesort(arr = Arr) => mergesort([2,9,6])
[ 3) len = 3
  4) len < = 1? = False
  5) middle = 3//2 = 1
  6) mergesort([2,9,6][:1]) => mergesort([2])
  [ 7) len = 1
    8) len < = 1? = True => return; end of call @6) i.e. mergesort([2]) ]
  9) mergesort([2,9,6][1:]) => mergesort([9,6])
  [ 10) ... From previous dry-runs we know that this works fine; => Arr = [2,6,9]
    11) end of call @ 9) i.e. mergesort([9, 6])
  12) merge([2,6,9])
  [ 13) len = 3
    14) middle = 3//2 = 1
    15) left_pos = 0
    16) right_pos = 1
    17) current_pos = 0
    18) helper = [2,6,9]
    19) while 0<1 && 1 < 3? = True
    [ 20) helper[0] < helper[1]? = True
      [ 21) arr[0] = helper[0] => arr[0] = 2; arr = [2,6,9]; Arr = [2,6,9]
        22) left_pos+=1 ]
      23) current_pos+=1 => current_pos = 1
      24) while 1<1 && 1<3? = False => end of while loop]
    25) for iter in range(1,1) => no for loop # range(1,1) = []
    26) end of call @ 12) i.e. merge(2,6,9)
  27) end of call @ 2) i.e. mergesort([2,6,9])

Finished: Final result: Arr = [2,6,9]

Let us also quickly check the different permuations of [2,6,9]

1) Arr = [6,2,9]
2) mergesort([6,2,9])
3) len = 3
4) middle = 3//2 = 1
5) mergesort([6,2,9][:1]]) => mergesort([6]) => Arr = [6,2,9]
6) mergesort([6,2,9][1:]) => mergesort([2,9]) => Arr = [6,2,9]
7) merge([6,2,9])
[ 8) len = 3
  9) middle = 3//2 = 1
  10) left_pos = 0 
  11) right_pos = 3//2 = 1
  12) current_pos = 0
  13) helper = [6,2,9]
  14) while 0<1 && 1 < 3? = True
  [ 15) helper[0] < helper[1]? = 6 < 2? = False
    [ 16) arr[0] = helper[1] => arr[0] = 2; arr = [2,2,9]; Arr = [2,2,9]
      17) right_pos+=1 => right_pos = 2 ]
    18) current_pos+=1 => current_pos = 1
    19) while 0<1 && 2<3? = True
    20) helper[0] < helper[2]? = 6 < 9? = True
    [ 21) arr[1] = helper[0] => arr[1] = 6; arr = [2,6,9]; Arr = [2,6,9]
      22) left_pos+=1 => left_pos = 1 ]
    23) current_pos +=1 => current_pos 2
    24) while 1<1 && 2<3? = False => end of while loop ]
  25) for iter in range(1,1) => no for loop # range(1,1) = []
  26) end of call @ 7) i.e. merge([6,2,9])
27) end of call @ 2)

Finished: Final result: Arr = [2,6,9]

Our implementation seems to work fine. 
      
 
       
        
                
                  
                    
              
             

                  
                         
         